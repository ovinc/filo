"""Manage Series of experimental data in potentially several folders."""

from pathlib import Path
import pandas as pd

from .general import make_iterable, list_files


class File:
    """Individual file among the series of files. Used by Series"""

    def __init__(self, file, num):
        """Parameters:

         - file: pathlib object linking to the file
         - num: number identifier of the file across all folders
         """
        self.file = file            # Pathlib object
        self.folder = file.parent   # Pathlib object
        self.name = file.name       # filename (str)
        self.num = num              # identifier (int)
        self.time = None  # stores time when Series.set_times() is called

    def __repr__(self):
        return f'File {self.name} in folder {self.folder}, id number {self.num}.'


class Series:
    """Class to manage series of experimental data in one or several folders."""

    def __init__(self, paths='.', extension='', savepath='.'):
        """Init series of spectra object.

        Parameters
        ----------
        - paths can be a string, path object, or a list of str/paths if data
          is stored in multiple folders.
        - extension: extension of files to be considered (e.g. '.txt')
        - savepath: folder in which to save analysis data if applicable.
        """
        # Create an iterable of folders to consider for analysis -------------
        if type(paths) is str:
            self.folders = paths,
        else:
            self.folders = make_iterable(paths)
        self.folders = [Path(folder) for folder in self.folders]
        self.savepath = Path(savepath)
        self.extension = extension

        self.times_set = False  # indicates if file times have been calculated

        self.files = [] # will store all file objects from filo.File class

        # Create list of file objects with useful info -----------------------
        n = 0  # shift in measurement number if multiple folders
        for i_folder, folder in enumerate(self.folders):
            for i_local, file in enumerate(list_files(folder, extension)):
                num = i_local + n
                self.files.append(File(file, num))
            else:
                try:
                    n += i_local + 1
                except UnboundLocalError:
                    raise UnboundLocalError(f'No data in folder {folder.resolve()}')

    def __repr__(self):
        return f'File series of extension {self.extension} '\
               f'in folders {[str(folder) for folder in self.folders]}'

    # Timing info ------------------------------------------------------------

    def set_times(self):
        """Define time (unix) associated with each file. Subclass if necessary."""
        for file in self.files:
            file.time = file.file.stat().st_mtime
        self.times_set = True

    @property
    def times(self):
        """Get time of spectra files from creation date.

        Output
        ------
        pandas dataframe with num as index and time, folder, filename
        as columns.
        """
        if self.times_set:

            ii = [file.num for file in self.files]
            dirs = [str(f.folder.relative_to(self.savepath)) for f in self.files]
            filenames = [file.name for file in self.files]
            times = [file.time for file in self.files]

            all_data = zip(ii, times, filenames, dirs)
            columns = ['num', 'time (unix)', 'filename', 'folder']
            data = pd.DataFrame(all_data, columns=columns)
            data.set_index('num', inplace=True)

            return data

        else:
            raise AttributeError('Times not set yet (use set_times())')

    def save_times(self, filename='File_Time.txt', sep='\t'):
        """Save times of files as generated by times() in .txt file."""
        data = self.times
        file = Path(self.savepath) / filename
        data.to_csv(file, sep=sep)

    def load_times(self, filename='File_Time.txt', sep='\t'):
        """Load pandas dataframe with times and file info."""
        file = Path(self.savepath) / filename
        data = pd.read_csv(file, sep=sep)
        data.set_index('num', inplace=True)
        return data
